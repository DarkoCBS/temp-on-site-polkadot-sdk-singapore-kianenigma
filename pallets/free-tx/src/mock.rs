use crate as pallet_free_tx;
use frame_support::{
	derive_impl,
	pallet_prelude::Weight,
	traits::{ConstU128, ConstU16, ConstU32, ConstU64},
};
use sp_core::H256;
use sp_runtime::{
	traits::{BlakeTwo256, Convert, IdentityLookup},
	BuildStorage,
};

type Block = frame_system::mocking::MockBlock<Test>;
type Balance = u128;
type AccountId = u64;

// Configure a mock runtime to test the pallet. We use the simpler syntax here.
frame_support::construct_runtime! {
	pub struct Test {
		System: frame_system,
		Balances: pallet_balances,
		FreeTx: pallet_free_tx,
	}
}

// Feel free to remove more items from this, as they are the same as
// `frame_system::config_preludes::TestDefaultConfig`. We have only listed the full `type` list here
// for verbosity. Same for `pallet_balances::Config`.
// https://paritytech.github.io/polkadot-sdk/master/frame_support/attr.derive_impl.html
#[derive_impl(frame_system::config_preludes::TestDefaultConfig)]
impl frame_system::Config for Test {
	type BaseCallFilter = frame_support::traits::Everything;
	type BlockWeights = ();
	type BlockLength = ();
	type DbWeight = ();
	type RuntimeOrigin = RuntimeOrigin;
	type RuntimeCall = RuntimeCall;
	type Nonce = u64;
	type Hash = H256;
	type Hashing = BlakeTwo256;
	type AccountId = AccountId;
	type Lookup = IdentityLookup<Self::AccountId>;
	type Block = Block;
	type RuntimeEvent = RuntimeEvent;
	type BlockHashCount = ConstU64<250>;
	type Version = ();
	type PalletInfo = PalletInfo;
	type AccountData = pallet_balances::AccountData<Balance>;
	type OnNewAccount = ();
	type OnKilledAccount = ();
	type SystemWeightInfo = ();
	type SS58Prefix = ConstU16<42>;
	type OnSetCode = ();
	type MaxConsumers = frame_support::traits::ConstU32<16>;
}

#[derive_impl(pallet_balances::config_preludes::TestDefaultConfig)]
impl pallet_balances::Config for Test {
	type Balance = Balance;
	type DustRemoval = ();
	type RuntimeEvent = RuntimeEvent;
	type ExistentialDeposit = ConstU128<1>;
	type AccountStore = System;
	type WeightInfo = ();
	type MaxLocks = ConstU32<10>;
	type MaxReserves = ();
	type ReserveIdentifier = [u8; 8];
	// Need to update the `RuntimeHoldReason` expected by the balances pallet.
	type RuntimeHoldReason = RuntimeHoldReason;
	type FreezeIdentifier = ();
	type MaxFreezes = ConstU32<10>;
}

// In the runtime, we can actually implement logic to convert balance to weight, because
// WE KNOW that balance is u128, and Weight is two `u64`.
pub struct SimpleBalanceToWeight;
impl Convert<Balance, Weight> for SimpleBalanceToWeight {
	fn convert(input: Balance) -> Weight {
		use sp_runtime::SaturatedConversion;
		let saturated_u64: u64 = input.saturated_into();
		return Weight::from_parts(saturated_u64, saturated_u64);
	}
}

impl pallet_free_tx::Config for Test {
	type RuntimeEvent = RuntimeEvent;
	type NativeBalance = Balances;
	type RuntimeCall = RuntimeCall;
	/// Here we specify that `HoldAmount` is 1337. Anyone using your pallet can implement their own
	/// amount.
	type HoldAmount = ConstU128<1337>;
	/// Here we pull the `RuntimeHoldReason` generated by the `#[runtime]` macro.
	type RuntimeHoldReason = RuntimeHoldReason;
	/// Use our simple converter...
	type BalanceToWeightConverter = SimpleBalanceToWeight;
	// Assuming blocks happen every 6 seconds, this will be 600 seconds, approximately 10 minutes.
	// But this is all just test config, but gives you an idea how this is all CONFIGURABLE
	type EraLength = ConstU64<100>;
}

pub fn new_test_ext() -> sp_io::TestExternalities {
	// learn how to improve your test setup:
	// https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/guides/your_first_pallet/index.html
	frame_system::GenesisConfig::<Test>::default().build_storage().unwrap().into()
}
